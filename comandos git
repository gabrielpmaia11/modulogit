									curso de git 


	comandos de configuração 

git config --global user. name "gabriel"
	   --global user.email ""
	   	coore.editor "vs"
 
comandos para lista das configurações

git config --list
 
===========================================

git init para iniciar novo repositorio 


	git status ver se tem alteração

	git log para ver todos os comits 

	git add -A para salvar as alterações 
	
	git commit -m para comitar ou -am para comitar e adicionar 
		
		git branch para ver em qual branch estou no caso master  é pela head 


===========================================
git reset para resetar 

quero voltar para tal comit, pegar o codigo dele, 2bc123421342344
inteiro ou os 7 primeiuros   e  colocar 


	git soft  --- volta no outro comit mas com as alterações sem commit, antes do commit tem acesso as alterações --RECOMENDADO mantem os arquivos mas nao da commit nem add  tem que fazer isso 
	git mixed  == mesma coisa mas nao vai ta preparado pra comitar, perde as alterações se nao der add no git
	git hard --- ignora tudo que uma vez exisiu,  e volta os arquivos para o comit escolhido entao exclui tudo  --NAO RECOMENDADO EQUIPE
parei no 1:05	
	
 
	
	git reset --hard   ebc86294f0f3a8609c6c87eb62c4017d693e9368



arthur freitas
há 1 ano
qual é a diferença entre o git reset --soft e o git revert?
Responder

1 resposta
drifogo
drifogo
há 1 ano
git reset é para um branch, git revert é para um commit
=========================================


BRANCHS



git branch lista todas as branchs, e o * é a que estou

cada branch tem seu historico

caso crio uma nova ele pega oque eu tenho que começa uma nova a partir do que tenho



git branch teste ===> criar nova branch

git branch-->lista as branchs

git checkout teste -->mudar de branch para teste 

salvei em um branch nao salva no outro .

temos 2 tipos de historico agora

caso eu der um chekout e ir pro teste altero o arquivo fica salvo aqui, se voltar no mastar ta outra coisa 


Em termos simples, uma branch é literalmente uma ramificação da base do código. Enquanto mantemos o código de produção na branch principal (por exemplo), podemos criar uma ramificação para trabalhar livremente neste código e somente depois juntar (mergear) estes códigos. 

branch é historicos diferentes 


quando crio ele nao vai pra ela apenas cria 





=========


1:17:30 ss

Ver diferença de arquivos e voltar para arquivos (antes do commit e  add)

git diff--> ver as mofificações, vermelho é o anterior e  o verde com o mais é a  adicao com alteraçlão entao foi do vermelho para o novo verde e  quiandmo adiciona nova linha ele mostra em baixo

git
git diff --name-only -->serve para ver todos os arquivos alterados

git diff README.md -->ver alterações em apenas um arquivo 

voltar no codigo antes das alterações 
git checkout HEAD -- README.md  o head é a  branch atual.

============================


1:27:26


=====

Começando com o GITHUB 
repositorios remotos--> pegar o local do nosso pc master e  mandar pra nuvem no github


Criar conta no git hub e  fazer um repoisitorio nao precisa colocar o readme 
Adicionar nova ssh
comandos :

	ssh-keygen -t rsa -b 4096 -C "gabrielmaiagit11@gmail.com"
	apertar enter denovo
	Your identification has been saved in /home/gabrielmaia/.ssh/id_rsa
Your public key has been saved in /home/gabrielmaia/.ssh/id_rsa.pub   ::local das chaves 

pegar a  chave publica e colar la na adicao de nova ssh no git hub e  por senha 

(nao e obrigado senha na ssh)


Adciionar um token no git jhub  marcando apenas a peinmeira opcao e eu fui e atutehnticando 

Adicionar repositorio remoto origin é o nome qualquer padrao e adicionamos o origin para esse modulo git 

adicionar um repositiorio remoto ao nosso local com as duas ligações do remoto e  local no github 

git remote add origin https://github.com/gabrielpmaia11/modulogit.git
outros comandos que ta no site para por 

 ver  o reposorio adicionado git remote :
 
gabrielmaia@gabrielmaia-VirtualBox:~/Área de Trabalho/git$ 				git remote  (ver qual meu remoto no caso e  o origin)
origin -->repositorio

push é colocar do local pro remoto 
feth é pra pegar do remto e colocar no meu computador pra puchar 

ver detalhes com o fech ou push 

gabrielmaia@gabrielmaia-VirtualBox:~/Área de Trabalho/git$ 				git remote -v  (mais detalhes ))
origin	https://github.com/gabrielpmaia11/modulogit.git (fetch) pegar 
origin	https://github.com/gabrielpmaia11/modulogit.git (push)  enviar 
gabrielmaia@gabrielmaia-VirtualBox:~/Área de Trabalho/git$ git push -u origin master

 
Enviar  push

-->comando de enviar os codigos com alterações do local para o remoto 
o u é complemento  e o destino é o origem e a branch master 
to endiando o branch master para o repositorio origem do git hub

git push -u origin master
vai pedir o usuario e a senha como token 

mudar senha nas credenciais 
gabrielmaia@gabrielmaia-VirtualBox:~/Área de Trabalho/git$ git config --global credential.helper cache
gabrielmaia@gabrielmaia-VirtualBox:~/Área de Trabalho/git$ git push origin master 


como reverter e  pedir senha denovo (token expira)
	git config --global --unset credential.helper
	quando der o git oush origin master vai pedir a senha denovo 

vai pedir emial e  senha e  ja salva automatico 

agora no repositio cria o branch master  
agora temos o repositio dentro do git hub 

========

git push -u origin master
branch 'master' set up to track 'origin/master'.
Everything up-to-date
==========

enviar do local pro remoto as modificações dos arquivos 

com isso é so usar os add e  comit para mudar as coisas dentro do git hub 
git add -A
git commit -am "Frase"
git push origin master  --> cadastrados a origin como destino o destino é esse projeto para savar e a  branch para enviar 

==================

155:40

gitignore, colocamos arquivos para o git nao incluir dentro, como o *.sql, *.txt,sobre diretorios pasta/ que ignora ou pasta/*, ai nao envia pro projeto, ai dentro dele tem a remoção de varias pastas 



=======================

2:00
git revert 

volta comitando 

como o git reset mas , a dferenca e quqe com o git revert temos acesso ao commit errado , o salvador das sexta feira, enviamos o codifo no im do dia no ar e  no momento ele da bug, ai podemos
usar o rever t 
o reset perdemos as alterações e  funcionadadees interia, dso queremos reverter para corrigi depois , pegamos o codigo do commit errado 
9b0b40280a00eb6c7d493ec7e7c0280f94cbc883

quando usamos o revert ele abre o editor que cadastrasmos, com as alterações , no caso com o revert cnao QUEREMOS abrir temquer dar um comando chamado,git revert --no-edit 
nao vai mudar vai voltar o comit ao contrario, as linhas voltam, ai 

git revert --no git 9b0b40280a00eb6c7d493ec7e7c0280f94cbc883


sair do git log com q porque tem muitos commits


se dermos git log , temos ainda o commit, do anterior 

temos acesso ao commit com o problema sem perder o codigo que fizemos


============================

2:7 como deletrar branchs remotas 
deletadno do remoto e  deixando no local 

usando o git 

git push origin :teste2 com isso vai deletar o teste2 branch

: signigfica deletar commits e  tags 
podemos deletar 


deletar branch local 

ate o momento estavamos da trest2 ou master

pra deletar precisa sair do teste 2

git branch -D teste2 deleta do local



==================
2:13 git pull existe do push e o pull, o push e  quando enviamos do resiitorio local ate do remoto e  o pull é quando 


OBSERVAÇÂO LOCLA E REMOTO, no terminarl tem 2 divisoeso oringein com o master e  o master head, com isso se aparecer  no git status seu repositorio local tem 2 commits a frente que o remoto basta dar add para dicionar e salvar tudo com o push origin master




origin   e o destino  e o master e  o rbanch que ta enviando 


o pull é pra pegar coisas que estamso detnro do remoto se eu modifiquei la que nao ta no local ou outra pessoa fez isso m entao pra modificar isso e  so pegar as coisas com o pull

em vez od push damos o pull
pra pegar as coisas e  trazer os commits aqui no local pra tualziar os repositorios locais 

git pull origin master 


trazando os cmitrs das astualizaçãoes tambem manda tamem oo autor do projeto com o susuario 
RECOMENTAÇÂO ANTES DE DAR UM PUSH DAMOS UM PULL commits e  add, na ora do upsh, antes da pull pegar as coisas do remoto juntar com o local e  juntamos tudo com as coisas do remoto e local
para evitar coonflitos 


-========

2:20   --clonar projeto 
 pegar um projeto do git hub e  pegar  e colocar no local o clone nao pucha o repositorio clona uma copia desse repositorio no local, nao sou o dono , entao nao consigo fazer alteralções nese repositorios podemos retribuir para clonar 
 
 clonar pra pegar ele , so fazer uma pasta tipo do servidor , e  dar um clone  com git clone e a url htttps://github.com;uçport/modulogit e  ai na pasta tem o clone  os arquivos do repotiroio remoto 



fork é pra pegar um codigo e  modifigcar ele e  depois poder ddar como sugestao para outra epssoa e  pegar de um repositorio , e o pull request  a gente manda e o merge juntamos branchs 